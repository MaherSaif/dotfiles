#!/usr/bin/env ruby

require 'ftools'

# File handling utilities.

def all_files(dir)
  Dir.new(dir).reject {|name| name == '.' || name == '..' || name == '.DS_Store' }
end

def move_everything(from, to)
  all_files(from).each do |file|
    File.move("#{from}/#{file}", "#{to}/#{file}")
  end
end

def read_file(file)
  File.read(file).chomp
end

def write_file(file, stuff)
  open(file, 'w') {|io| io.write(stuff) }
end

def mkdir!(dir)
  Dir.mkdir(dir) unless File.exist?(dir)
end


# Desktop manipulation stuff.

def desktops_path
  "#{ENV['HOME']}/desktops"
end

def desktop_path(desktop = nil)
  "#{desktops_path}/#{desktop}"
end

def real_desktop_path
  "#{ENV['HOME']}/Desktop"
end

def current_desktop_file_path
  "#{desktops_path}/.current"
end

def desktops
  all_files(desktops_path).reject {|name| name == '.current' || name == '.DS_Store' }
end

def current_desktop
  $current_desktop ||= read_file(current_desktop_file_path)
end

def count_files_on_desktop(desktop)
  all_files(desktop == current_desktop ? real_desktop_path : desktop_path(desktop)).length
end


# Operations.

def setup
  mkdir!(desktops_path)
  if !File.exist?(current_desktop_file_path)
    mkdir!(desktop_path('master'))
    write_file(current_desktop_file_path, 'master')
  end
end

def list_desktops
  desktops.each do |desktop|
    puts "#{desktop == current_desktop ? '*' : ' '} #{desktop} (#{count_files_on_desktop(desktop)})"
  end
end

def switch_to_desktop(desktop)
  move_everything(real_desktop_path, desktop_path(current_desktop))
  mkdir!(desktop_path(desktop))
  move_everything(desktop_path(desktop), real_desktop_path)
  write_file(current_desktop_file_path, desktop)
end


setup

if ARGV.length == 0
  list_desktops
else
  switch_to_desktop(ARGV[0])
end
